class Solution {
    public:
void recurPermute(vector<int> &ds, vector<int> &arr, vector<vector<int>> &ans, int freq[]) {
    if (ds.size() == arr.size()) {
        ans.push_back(ds);
        return;
    }
    for (int i = 0; i < arr.size(); i++) {
        if (!freq[i]) {
            // Skip duplicates
            if (i > 0 && arr[i] == arr[i - 1] && !freq[i - 1]) continue;

            ds.push_back(arr[i]);
            freq[i] = 1;
            recurPermute(ds, arr, ans, freq);
            freq[i] = 0;
            ds.pop_back();
        }
    }
}

vector<vector<int>> uniquePerms(vector<int> &arr, int n) {
    vector<vector<int>> ans;
    vector<int> ds;
    int freq[arr.size()] = {0};

    // Sort the array to handle duplicates
    sort(arr.begin(), arr.end());

    recurPermute(ds, arr, ans, freq);
    return ans;

    }
};